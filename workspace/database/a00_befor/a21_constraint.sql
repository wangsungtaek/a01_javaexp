/*
# foreign  key : 한 열과 참조된 테이블의 열간에 외래 키 관계를 설정하고
실행가능하게 처리.
ex) 아래와 같이 사원테이블의 부서번호는 참조키관계를 부서테이블의 부서번호와
	설정하면 반드시 부서테이블에 데이터가 있어야 입력이 사원테이블에 입력이 가능하다.

1. 기본형식
	컬럼명 데이터유형 constraint 제약조건명 references 참조할테이블(참조할컬럼)
	컬럼명 데이터유형 references 참조할테이블(참조할컬럼)
*/

/*
-- 학사관리시스템의 학생테이블과 학과테이블을 만들고, 학과테이블의 학과 번호와
학생테이블의 학과번호를 참조키 관계를 설정해보자
*/
CREATE TABLE STUDEPT (
	DEPTNO NUMBER(3) PRIMARY KEY,
	DNAME VARCHAR2(50),
	LOC VARCHAR2(50)
);
INSERT INTO STUDEPT VALUES (101, '컴퓨터공학', '1호관');
SELECT * FROM STUDEPT;

CREATE TABLE STUDENT02 (
	STUDNO NUMBER PRIMARY KEY,
	NAME VARCHAR2(50) NOT NULL,
	DEPTNO NUMBER(3) CONSTRAINT STUDENT02_DEPTNO_FK REFERENCES STUDEPT(DEPTNO)
);

SELECT * FROM STUDEPT;
SELECT * FROM STUDENT02;
INSERT  INTO STUDENT02 VALUES(1000, '홍길동', 101);
-- 테이블에 있는 데이터 정산 입력
INSERT  INTO STUDENT02 VALUES(1001, '홍길동', 102);
-- 참조테이블에 없는 데이터 입력시 에러

/*
# check 제약조건 설정.
1. 컬럼에서 허용 가능한 데이터의 범위나 조건을 지정할 때, 활용된다.
	ex) 학년은 1~4학년까지만 입력, 학생들의 점수의 범위 0~100까지,
		성별은 '남', '여'만 입력 가능..

2. 기본형식
	컬럼명 데이터유형 CONSTRAINT 제약키명 CHECK(컬럼명 조건문)
	ex) 1,2,3,4 입력가능
	GRADE NUMBER(1) CONSTRAINT STUD_GRADE_CK CHECK(GRADE IN(1,2,3,4));
	ex) 1~100만 입력가능
	KOR NUMBER(3) CONSTRAINT STUD_KOR_CK CHECK(GRADE BETWEEN 1 AND 100);
 */
CREATE TABLE STUDENT03(
	NAME VARCHAR2(50) NOT NULL,
	GRADE NUMBER(1) CONSTRAINT STUDENT02_GRADE_CK CHECK(GRADE IN(1,2,3,4))
);

INSERT INTO STUDENT03 VALUES('홍길동', 1); -- ok
INSERT INTO STUDENT03 VALUES('김길동', NULL); -- ok (NULL 입력가능)
INSERT INTO STUDENT03 VALUES('홍길동', 5); -- error (CHECK 제약조건 범위 벗어남)

SELECT * FROM ALL_CONSTRAINTS WHERE OWNER='SCOTT'; -- 제약조건 조회
SELECT * FROM STUDENT03;

-- ex) STUDENT04테이블을 NO는 PRIMARY KEY, 이름은 NOT NULL,
-- 		성별은 남/녀, 국어, 영어, 수학 점수는 0~100만 입력 가능하게 만드세요.
CREATE TABLE STUDENT04 (
	NO NUMBER(3) CONSTRAINT STUDENT04_PK PRIMARY KEY,
	NAME VARCHAR2(15) CONSTRAINT STUDENT04_NN NOT NULL,
	GENDER CHAR(3) CONSTRAINT GENDER_CK CHECK(GENDER IN('남', '여')),
	KOR NUMBER(3) CONSTRAINT KOR_CK CHECK(KOR BETWEEN 0 AND 100),
	ENG NUMBER(3) CONSTRAINT ENG_CK CHECK(ENG BETWEEN 0 AND 100),
	MATH NUMBER(3) CONSTRAINT MATH_CK CHECK(MATH BETWEEN 0 AND 100)
);
INSERT INTO STUDENT04 VALUES(1, '홍길동', '남', 90, 80, 85); -- ok
INSERT INTO STUDENT04 VALUES(2, '신길동', '남자', 90, 80, 85); -- error (한글 3bytes 제약조건 에러 발생)
INSERT INTO STUDENT04 VALUES(3, '오영희', '여', 90, 80, 85); -- ok
INSERT INTO STUDENT04 VALUES(4, '신영희', '여', 90, 80, 101); -- error (CHECK 제약조건 범위 벗어남)

SELECT * FROM STUDENT04;
SELECT * FROM ALL_CONSTRAINTS WHERE TABLE_NAME='STUDENT04';
DROP TABLE STUDENT04;

/*
# 기존 테이블에 무결성 제약조건 추가.
1. Null을 제외한 무결성 제약조건 추가
	1) 기본형식
		ALTER TABLE 테이블명
		ADD CONSTRAINT 제약조건이름 제약조건타입 컬럼;
2. NULL 무결성 제약조건 추가
	1) 기본형식
		ALTER TABLE 테이블명
		MODIFY 컬럼명 CONSTRAINT 제약조건이름 제약조건타입;
 */
CREATE TABLE STUDENT05 (
	NO NUMBER,
	NAME VARCHAR2(50),
	KOR NUMBER(3),
	ENG NUMBER(3),
	MATH NUMBER(3)
);
-- 고유키 제약조건 설정
ALTER TABLE STUDENT05
ADD CONSTRAINT STUD_NO_UK UNIQUE(NO);
-- not null 제약조건 설정
ALTER TABLE STUDENT05
MODIFY (NAME CONSTRAINT STUD_NAME_NN NOT NULL);

-- DQL
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='STUDENT05';
DROP TABLE STUDENT05;

-- ex) EMP55로 복사테이블만들고,
--	EMPNO - unique, ENAME NOT NULL, DEPTNO는 DEPT테이블의 DEPTNO참조
--  SAL은 0이상으로 제약조건을 추가 처리해보세요
CREATE TABLE EMP55 AS SELECT * FROM EMP; -- 복사
ALTER TABLE EMP55 ADD CONSTRAINT EMPNO_UK UNIQUE(EMPNO); -- unique 제약조건 추가
ALTER TABLE EMP55 MODIFY(ENAME CONSTRAINT ENAME_NN NOT NULL); -- not null 제약조건 추가
ALTER TABLE EMP55 ADD CONSTRAINT DEPTNO_RF FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO); -- 외래키 추가
ALTER TABLE EMP55 ADD CONSTRAINT SAL_CK CHECK(SAL>=0);

SELECT * FROM EMP55;
DROP TABLE EMP55;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='EMP55';

/*
# 무결성 제약조건 삭제
1. 기본 형식
	alter table 테이블명
	drop constraint 제약조건명;
*/
ALTER TABLE EMP55 DROP CONSTRAINT EMPNO_UK;
ALTER TABLE EMP55 DROP CONSTRAINT ENAME_NN;

SELECT CONSTRAINT_NAME, STATUS, TABLE_NAME
  FROM USER_CONSTRAINTS 
 WHERE TABLE_NAME='EMP55';
 
/*
# 무결성 제약조건의 비활성화
1. 무결성 제약조건은 한시적으로 설정값에 의해 비활성화/활성화 처리를 할 수 있다.
2. 기본 형식
	ALTER TABLE 테이블명
	DISABLE CONSTRINT 제약조건명;
	ALTER TABLE 테이블명
	ENABLE CONSTRINT 제약조건명;
*/
ALTER TABLE EMP55 DISABLE CONSTRAINT EMPNO_UK;
ALTER TABLE EMP55 ENABLE CONSTRAINT EMPNO_UK;

--ex) 제약조건이 있는 STUDENT04테이블의 제약조건을 삭제하고,
--		비활성화/활성화 처리를 해보세요.

ALTER TABLE STUDENT04 DROP CONSTRAINT STUDENT04_NN;
ALTER TABLE STUDENT04 DROP CONSTRAINT STUDENT04_PK;
ALTER TABLE STUDENT04 DISABLE CONSTRAINT ENG_CK;
ALTER TABLE STUDENT04 ENABLE CONSTRAINT ENG_CK;

SELECT CONSTRAINT_NAME, STATUS, TABLE_NAME
  FROM USER_CONSTRAINTS
 WHERE TABLE_NAME = 'STUDENT04';