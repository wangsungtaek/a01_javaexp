package javaexp.a01_basic;

public class A01_Start {
	public static void main(String[] args) {
/*
 전체적인 java knowledage map
 1. java  특성을 확인..
 	웹프로그래밍 : MS(.net) vs Java의 프로그램
 	플랫폼 독립적 : OS(operation system - 운영체제)에 상관없이 사용할 수 있다.
		linus ==> Unix
	객체지향적 프로그램 : 설계를 효율적으로 할 수 있고, 상속으로 재사용과 다양한 상황에서
		변경 가능하다.
 
 2. 메모리에 대한 이해..
 	1) java은 stack, heap영역의 메모리를 가지고 있다.
 	2) stack영역에 기본 변수나 객체의 참조변수(힙영역 위치)가 저장.
 	3) heap영역에 객체의 실제 내용이 저장
 	
 3. primitive data type
 	1) 종류 - 크기, 형태에 따른 분류..
 	2) 메모리 할당 형식..
 		데이터유형 변수명;
 		변수명 = 데이터;
 		ex) int num01;
 		num01 = 25;
 	3) 변수명을 선언하는 규칙..
 		- 클래 객체, 일반 기본 유형.
 	4) 타입 변화
 		promote, casting..	
 
 4.연산자
	1) 증감연산, 산술연산자, 논리, 삼항연산자.
		변수명++;
		변수명+=5;
		변수명1 + 변수명2;
		변수명1 == 변수명2;
		변수명1 = 변수명2;
		변수명 >= 90? true 일때 처리데이터 : false일때 처리 데이터;
		
 5. 조건과 반복문 처리.
	1) if, case
	2) for, while, do-while
 	
------------------------------------------------------------------ 	
 	
 6. 배열
 	1) 데이터를 모아서 한번에 처리하는 메모리 영역을 만든다.
 		==> 객체 범위로 들어간다.
 		==> heap영역활용하여 stack영역에는 참조변수를 활용한다.
 	2) 기본 형식
 		int [] array = {1000,2000,3000};
 		데이터유형 [] 참조변수명 = {할당데이터1, 할당데이터2, 할당데이터3};

 7. 객체프로그래밍
 	1) class란?
 		객체를 만들기 위한 코딩단계를 말한다. class 클래스명{}
 		설계도라고 비유하는 경우도 있다.
 	2) 객체란?
 		위 class를 바탕으로 메모리가 만들어지고, 활용하는 것을 객체라고 한다.
 		위에 비유로 설계도를 통해서 만들어진 실체를 말한다.
 		메모리는 두개의 메모리를 다 활용을 한다.
 		stack영역에 주소값, heap영역에는 실제 객체를 할당.
 	3) 객체의 종류
 		java의 내장된 객체 : String(문자열) : 문자(char)가 모여서 된 배열,
 			그외, collection(메모리할당), Integer, Character..
 		사용자 정의 클래스에 의한 객체
 			클래스를 만들어 호출하는 객체..
 			class 클래스명{} ==> 클래스명 참조명 = new 클래스명(); ==> 객체..
 	4) 객체의 선언과 활용.
 		클래스명 참조변수 = new 클래스명();
 	5) 객체의 구성요소..
 		class 클래스명 {
 			// 1. 필드 : 객체의 전역 변수.
 			String name;
 			int age;
 			// 2. 생성자 : 클래스명으로 선언하는 객체를 초기화하는 구성요소이다.
 			public 클래스명(){
 			
 			}
 			// 3. 메서드 : 객체의 메모리에 있는 내용을 할당하거나 동적인 기능 처리를 할, 사용된다.
 			public void plus(int num01, int num02){
 				int sum = num01 + num02;
 		}
 	6) 객체의 메모리 할당과 활용..
 		클래스명 참조명 = new 생성자(); 생성자를 통한 객체를 생성.
 		참조명.필드;
 		참조명.메서드;

 8. 객체와 객체의 관계 처리..
 	1) 1:1관계
 		어떤 구매자가 하나의 물건의 구매할 때, class로 메모리를 설정하고,
 		해당 구성된 클래스를 메모리에서 호출할 때, 1:1관계의 내용을 사용하게 된다.
		class Customer {
			private Product pro;
		}
		class Product {
		
		}
 	2) 1:다 관계
 	3) 다:다 관계
 	4) 접근 제어자 : 위에 있는 관계에 접근 가능한 정도를 설정하여 활용하게 한다.
 		필드, 생성자, 메서드의 앞에 붙여 접근 여부를 설정한다.
 		private, default(x), protected, public
 		
 9. 객체의 상속
 	1) 프로그래밍의 효율을 위하여, 공통 객체를 기반으로 여러가지 상속 처리를 할 수 있다.
 	2) 클래스명 extends 상위클래스{}
 	3) 다형성(polymorphism)
 	4) 메서드 오버라이딩(overriding) : 하위 객체에서 상위 객체에 선언한 기능 메서드 재정의
 	5) 상속의 단계
 		기본 상속
 		추상 클래스 상속
 		인터페이스 상속
 ------------------------------------------------------------------
 10. 예외 처리.
 	1) 특정 프로그래밍의 예외적(에러, 정상적이지 않는 작동)에 대비해서 프로그래밍의 신뢰와
 		안정성을 위해 만든 클래스를 말한다.
 	2) 클래스명 extends Exception{}
 	3) 기본 형식
 		try {
 			예의의 가능성 있는 코
 		} catch {
 			예외가 발생했을 때, 처리할 내용..
 		} finally {
 			예외 상관 없이 처리할 내용..
 		}
 	4) 계층별 예외처리
 	5) throws 예외의 위임.
 	6) throw new 사용자정의예외(); : 예외 강제 발생..
 	
 11. 기타 API에 있는 사용되는 유용한 클래스..
 	1) String, Math, Wrapper(Integer, Double, ...)
 	2) Calendar, Date, LocalDate..
 	
 12. Collections
 	1) ArrayList<데이터유형> : add(), remove(), get()
 	2) Set : 메모리가 비유적으로 하면 항아리 모양으로 되어 있어, 할당 순서를
 		확인할 수 없지만, 중복불가능..
 	3) List : 메모리가 선형으로 순서를 지켜서 들어가면, 중복이 가능하다.
 	4) Map : 메모리가 key, value 형식으로 할당되어 있어, key으로 value의
 		객체를 호출하여 사용할 수 있다.
 	
 13. Thread
 	1) 여러가지 중첩된 프로세스를 한번에 TIME SLICE방식으로 처리하여 효과적으로
 		여러 프로세스 처리하는 것을 말한다.
 	2) Thread를 상속하거나, Runnable인터페이스를 활용하여 사용한다.
 	
 14. 스트림(IO)
 	1) 데이터의 입/출력을 효과적으로 처리해주는 객체를 말한다.
 	2) 기본적으로 Stream을 기반으로 InputStream, OutputStream을 사용하며,
 		기능에 따라서 문자열 처리, 파일을 처리, 통신 처리하는 Stream이 있다.
 	
 15. 네트웍처리..
 	1) 서버와 클라이언트 기반으로 통신을 처리하는 객체를 활용할 수 있다.
 
 ------------------------------------------------------------------
 1. 웹프로그래밍에서 필요로 하는 개념..
 	1) 위 기초 파트.
 	2) 클래스 기본 내용, 상속을 활용하긴 하지만, 프레임웍에서 호출방법만 알고 있으면 된다.
 	3) 예외 처리
 	4) String, Wrapper의 내용을 기본적으로 알아야 하고,
 	5) Collection에서 generic개념과 ArrayList을 필수적으로 파악하여야 한다.
 	6) Stream은 파일 업로드 처리시, 활용된다.
 
 */
	}
}
