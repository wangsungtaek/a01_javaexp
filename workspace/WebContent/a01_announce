다음 주 평가 관련
4지 선다
1. 응용SW기초기술활용
2. SQL활용
3. SQL응용

# 응용 SW기초기술 활용
1. 운영체제 특징 식별
	운영체제란 ? 사용자로 하여금 컴퓨터의 하드웨어를 보다 쉽게 사용할 수 있도록
	인터페이스를 제공해 주는 소프트웨어이다.
	1) 윈도우
		- 마이크로소프트사
		- 사용자가 컨트롤하는 마우스의 아이콘을 이용하여 소프트웨어를
			실행시키는 편리한 인터페이스를 지원한다.
		- 고객 지원이 체계적인 장점이 있다.
		- 문제점(버그 등)이 발경되었을 시 수정에 시간이 걸린다는 단점이 있다.
		- 이런 시간적인 차이를 이용하는 악성 해커들로 인하여 유닉스 계열의
			운영체제에 비하여 보안에 취약하다.
	
	2) 유닉스 계열
		- 1960년대 AT&T Bell 연구소, MIT, General Electric이 공동 연구로 개발한 운영체제
		- C 언어로 재이식되어 대중화의 기반을 마련하였다.
	
	3) 리눅스
		- 유닉스의 호환 커널이다.
		- 1991년 리누스 토발즈는 '자유 소프트웨어' 정책 하에서 완전히 자유롭고 재배포가
			가능한 운영체제인 유닉스를 만들었다.
		- '원하는 대로의 실행', '무료나 유로로 복제물 재배포', '필요에 따른 개작' 등의 자유부여
		- 버그 발생 시 다수의 개발자가 수정에 참여하여 빠른 업데이트가 가능하다.
		- 윈도즈와 같은 체계적인 지원이 상대적으로 부족하여 일반인들보다 전문가들이 사용한다.
		- 리눅스는 데비안, 레드헷, Fedora, Ubuntu, Cent OS와 같이 다양한 버전으로 출시되고있다.
		- 유닉스는 현재 서버시장과 슈퍼컴퓨터시장에서 매우 높은 점유율을 가지고 있다.
	
	4) 매킨토시
		- 유닉스 기반으로 만들어져 애플사의 제품군에서만 사용이 가능한 그래픽 기반 운영체제
		- 매킨토시 OS는 프로그램을 카피하고 삭제함으로써 install과 uninstall의 과정을
			단순화하였다
		- 드라이버 설치 또한 OS의 확장 폴더에 넣고 재부팅을 하면 인식되어 간단하다.

2. 리눅스/유닉 cli명령
	- cli(command line interface)
	- 시스템 제어, 파일 제어, 실행, I/O, 실행 중 프로그램 중지, 진단 및 검증등
	- 리눅스와 유닉스는 명령어를 Shell에서 입력할 수 있다.
	- #mkdir 디렉토리 생성하는 명령어
	- #cp 파일 복사 명령어 (-i는 덮어쓰기, -r는 하위 디렉토리 및 파일 모두 복사,
		-v는 명령어 실행 과정을 보여주는 옵션)
	- 명령어는 파일 디렉터리 관리, 유저 관리, 권한 관리, 프로세스관리, 통신 괸련 등으로
		구분될 수 있다.
	- 최상위 디렉토리 /
	- root는 최상위 디렉토리 아래의 root계정의 홈디렉터리임을 의미한다.
	
	1) / (최상위 디렉토리) 리눅스에서 디렉터리 구조
		. etc : 시스템 환경 및 주요 설정 파일 보관
		. tmp : 임시 파일 보관
		. lib : 프로그램 모듈 보관
		. usr : 사용자 활용 파일 보관
		. dev : 물리적 장치 제어를 위한 파일 보관
		. home : 각 사용자의 작업 디렉토리
		. boot : 커널을 위한 프로그램 파일 보관
		. root : 슈퍼유저 홈 디렉토리
		. sbin : 슈퍼유저가 사용하는 명령어 저장 디렉토리
		. var : 시스템 동작 중 변화하는 파일 저장
		기타
	2) 리눅스/유닉스 기본 명령어
		. 시스템 관련 : #uname -a, #numae -r, #cat, #uptime 등
		. 하드웨어 : #dmesg, #free -m, #lspci -tv, #lshal 등
		. Statistics : #top, #mpstat 1, #isostat 2등
		. 사용자 : #id, #last, #who 등
		. 파일처리 : #ls, #pwd, #rm, #cp, #mv 등
		. 프로세스 : #ps, #pmap, #kill pid 등
		. 파일 permission : #chmod, #chown 등
		. 네트워크 : #ifconfig, #dig, #host 등
		. 압축 : #tar, #gzip 등
		. 검색 : #grep, #find, #locate
		. 로그인 : #ssh, #telnet host
		. 파일 이동 : #csp, #rsync 등
		. 디스크 사용 : #df, #du
		. 디렉터리 이동 : #cd
		
		
		
3. 유닉스와 리눅스 차이점
	분류		리눅스								유닉스
	비용		.대부분 무료이며 지원 정책에 따라	.대부분 유료
				일부 유료 서비스 제품도 있음
	사용자		.개발자, 일반 사용자				.메인프레임, 워크스테이션 등
													대형 시스템 관리자
	개발사	 	.커뮤니티							.IBM, HP 등
	개발 배포	.오픈소스 개발						.인터넷 서버, 워크스테이션 등
													대형 서비스에 주로 사용	
	사용량		.모바일폰, 태블릿 등 다양하게		.인터넷 서버, 워크스테이션 등
				사용								대형 서비스에 주로 사용
	사용자편의	.GUI 제공, 파일시스템 지원,			.커맨드 기반이 주였으나 GUI도
				BASH 셀 사용						제공하는 추세, 파일시스템 제공
													.기본은 Boume Shell, 현재는 많은
													Shell과 호환 가능
	
4. shell의 주요 기능
	- shell이란 컴퓨터 내부를 관리하는 kernel과 사용자 간을 연결하는 Command 창이다.
	- 세션별 변수를 설정, 운영체제를 사용자가 원하는 상태로 설정하도록 지원
	- 사용자 요청에 기반한 명령렬 작성
	- 백그라운드 처리, 서브 셸 생성
	- 일련의 명령어를 묶어 처리하는 스크립트 기능 지원 등
	- Bourne 계열은 Bash 셸, Korn 셸, Bourne 셸 등 존재
	- C 계열은 Csh, Tsh, Zsh, Ash 등 존재
	- Ksh 셸은 리눅스에서, Bash 셸은 리눅스에서 가장 보편적으로 사용되고 있다.
	
5. 운영체제 핵심 기능 : 메모리 관리, 프로세스 관리, 가상화 등등.
	운영체제는 중앙 처리 장치, 메모리, 스토리지, 주변 기기 등을 적절히 관리한다.
	1. 메모리관리
		- 메모리 안에는 다수의 프로그램들이 실행된다.
		- 메모리가 꽉 차게 되면 시스템의 속도가 느려지고 때로는 시스템이 멈추는
			현상이 발생한다.
		- 따라서 프로그램의 실행이 종료될 때까지 메모리를 가용한 상태로 유지 및
			관리하는 것을 메모리관리라고 한다.
		- 메모리에 있는 프로그램은 중앙 처리 장치인 CPU로 이동하여 처리된다.
		- 이동시 CPU는 Virtual or logical address를, 메모리는 physical address를 사용하는데
			이를 매핑하는 것은 MMU(Memory Management Unit)가 담당한다.
		- 이를 통해 어떤 부분의 메모리가 현재 사용되는지, 어떤 순서로 메모리에 입출력되어야
			하는지, 메모리 공간이 필요할 경우 어떻게 확보 및 제거할지에 대한 종합적인
			관리가 메모리관리이다.
	2. 프로세스관리
		- 프로그램은 파일 형태로 저장하여 관리되다가 실행을 시키면 동작을 하게 된다.
			이때 실행 중인 프로그램을 프로세스라고 한다.
		- 프로세스관리 기법 : 일시 중지 및 재실행, 동기화, 통신, 교착상태 처리,
			프로세스 생성 삭제 등이 있다.
	3. 가상화
		- 가상화는 물리적인 리소스들을 사용자에게 하나로 보이게 하거나, 반대로 하나의
			물리적인 리소스를 여러 개로 보이게 하는 것을 의미한다.
		- 대부분의 서버는 용량의 20% 정도만을 사용하는데, 가상화는 서버의 가동률을
			60~70% 이상으로 올릴 수 있다.
		- 가상화를 통해 사용자는 하나의 PC에 여러 개의 운영체제(윈도즈, 유닉스/리눅스 등)을
			설치하여 개발되는 프로그램을 다양한 환경에서 테스트할 수 있도록 하며,
			서로 다른 운영체제에서만 구동되는 프로그램을 실행시키도록 지원하기도 한다.
		- 가상화는 크게 '플랫폼 가상화', '리소스 가상화'로 구분된다.
			. 플랫폼 가상화 : 하드웨어 플랫폼 위에 실행되는 호스트 프로그램이 게스트
				프로그램을 만들어 마치 독립된 환경을 만들어 낸 것처럼 보여 주는 것
				게스트 소프트웨어 위에 사용자는 독립된 하드웨어에서 소프트웨어가
				실행되는 것처럼 활용할 수 있다.
			. 리소스 가상화 : 메모리, 저장 장치, 네트워크 등을 결합하거나 나누는 것인데,
				사용자는 가상화된 물리적 장치들이 어떤 위치에 있는지 모르는 경우가 많다.
	
	4. 클라우드
		- 인터넷 기반에서 구동되는 컴퓨팅 기술을 의미한다.
		- 클라우드 컴퓨팅을 이용하면 응용 프로그램을 필요에 따라 불러 사용하고,
			데이터를 손쉽게 저장 및 추출할 수 있다.
		- 태블릿, 휴대폰 등 사용 디바이스가 다양해지면서 클라우드 컴퓨팅은 중요도가
			높아지고 있다.
		- 클라우드 서버스는 IaaS, PaaS, SaaS등으로 구분된다.			 

6. 데이터베이스 종류(파일시스템, 계층형, 망형, 관계형)
	1) 파일시스템
		- 파일에 이름을 부여하고 저장이나 검색을 위하여 논리적으로 그것들을 어디에
			위치시켜야 하는지 등을 정의한 뒤 데이터베이스 전 단계의 데이터 관리 방식이다.
	2) 계층형 데이터베이스 관리시스템(HDBMS : Hierarchical Database Management System)
		- 데이터를 상하 종속적인 관계로 계층화하여 관리하는 데이터베이스
		- 데이터에 대한 접근 속도가 빠르지만, 종속적인 구조로 인하여 변화하는 데이터 구조에
			유연하게 대응하기 쉽지 않다. IMS, System2000
	3) 망형 데이터베이스 관리시스템(NDBMS : NetWork Database Management System)
		- 데이터의 구조를 네트워크상의 망상 형태로 논리적으로 표현한 데이터 모델
		- 트리구조나 계층형 데이터베이스보다 유연하지만 설계가 복잡한 단점이 있다.
		- IDS, TOTAL, IDMS와 같은 제품이 있다.
	4) 관계형 데이터베이스 관리시스템(RDBMS : Relational Database Management System)
		- 가장 보편화된 데이터베이스 관리시스템.
		- 데이터를 저장하는 테이블의 일부를 다른 테이블과 상하 관계로 표시하며
			상관관계를 정리한다.
		- 변화하는 업무나 데이터 구조에 대한 유연성이 좋아 유지 관리가 용이하다.
		- Oracle : 미국 오라클사에서 개발한 데이터베이스 관리시스템으로 유료이다.
			리눅스/유닉스/윈도 모두 지원하며 대형 시스템에서 많이 사용한다.
		- SQL Server : 마이크로소프트사에서 개발한 관계형 데이터베이스 시스템
			윈도즈 서버에서만 구동되며, 마이크로소프트사의 개발언어인 C#등과 가장 잘 호환된다.
		- MySQL : 썬 마이크로시스템에서 소유했던 관계형 데이터베이스 시스템이었으나
			오라클에서 인수하였다. 리눅스, 유닉스, 윈도에서 모두 사용이 가능하고
			오픈소스 기반으로 개발되었다.
		- Maria DB : MySQL 출신 개발자가 만든 데이터베이스로 MySQL과 완벽히 호환된다.
   
7. DBMS의 특징(무결성, 일관성, 보안성 내용 확인.)
	- 데이터 무결성 : 부적절한 자료가 입력되어 동일한 내용에 대하여 서로 다른 데이터가
		저장되는 것을 허용하지 않는 성질
	- 데이터 일관성 : 삽입, 삭제, 갱신, 생성 후에도 저장된 데이터가 변함없이 일정
	- 데이터 회복성 : 장애가 발생하였을 시 특정 상태로 복구되어야 하는 성질
	- 데이터 보안성 : 불법적인 노출, 변경, 손실로부터 보호되어야 하는 성질
	- 데이터 효율성 : 응답 시간, 저장 공간 활용 등이 최적화되어 사용자, 소프트웨어,
		시스템 등의 요구 조건을 만족 시켜야 하는 성질
   
8. ER model의 구성요소(엔티티, 속성, 관계의 내용 확인)
	ERD란? 업무 분석 결과로 도출된 실체(엔티티)와 엔티티 간의 관계를 도식화한 것이다.
	ERD로 도식화하기 전 각 개체를 사각형, 화살표, 마름모로 표기한 형태를 ER 모델이라고 한다.
	1) 엔티티(Entity)
		- 사물 또는 사건으로 정의되며 개체라고도 한다.
			ERD에서 엔티티는 사각형으로 나타내고 사각형 안에는 엔티티의 이름을 넣는다.
		- 가능한 한 대문자로 엔티티 이름을 써 주며 단수형으로 명명한다.
		- 유일한 단어로 정한다.
	2) 속성(Attribute)
		- 엔티티가 가지고 있는 요소 또는 성질을 속성이라 부른다.
		- 속성은 선으로 연결된 동그라미로 표기하거나 표 형식으로 표기하기도 한다.
		- 속성명은 단수형으로 명명한다.
		- 엔티티명을 사용하지 않는다.
		- 속성이 필수 사항(Not Null)인지, 필수 사항이 아닌지(Null) 고려하여 작성한다.
	3) 관계(Relationship)
		- 두 엔트리 간의 관계를 정의한다.
		- 개체는 사각형, 속성은 타원형을 이용하여 표시하며 관계 표시는 31페이지 표를
			참고한다.
		
9. 데이터 베이스에서 정규화 수행 단계별 설명 내용 확인.
	1) 데이터베이스 정규화는 무결성을 확보하고 중복성을 배제하여 테이블에 정확한
		데이터가 들어가도록 하는 데 목적이 있다. 데이터의 중복성을 없애면 저장 공간을 최소화
		하고 시스템의 속도 또한 빠르게 할 수 있다.
	2) 정규화 수행 단계
		- 1차 정규화 : 반복되는 그룹의 속성을 별도로 추출한다.
		- 2차 정규화 : 부분 함수적 종속성을 제거한다.
		- 3차 정규화 : 키에 중속되지 않은 컬럼을 제거한다.
10. DB 기본 명령어 아닌 것 식별
	기본 처리	SQL		설명
	1) Create	Insert	테이블 내 칼럼에 데이터를 추가한다.
	2) Read		Select	테이블 내 칼럼에 저장된 데이터를 불러온다.
	3) Update	Update	테이블 내 칼럼에 저장된 데이터를 수정한다.
	4) Delete	Delete	테이블 내 칼럼에 저장된 데이터를 삭제한다.
	
11. OSI 7 layer 특징
	- 국제 표준화 기구인 ISO에서 개발한 네트워크 계층 표현 모델이다.
	- 각 계층은 서로 독립적으로 구성되어 있고, 각 계층은 하위 계층의
		기능을 이용하여 상위 계층에 기능을 제공한다.
	- 1계층인 물리 계층부터 7계층인 애플리케이션 계층으로 정의되어 있다.
	송신측							수신축
	응용계층		Application		응용계층
	표현계층		Presentation	표현계층
	세션계층		Session			세션계층
	전송계층		Transport		전송계층
	네트워크계층	NetWork			네트워크계층
	데이터링크 계층	Data Link		데이터링크 계층
	물리 계층		Physical Link	물리 계층
	
	1) 물리 계층
		- 실제 장비들을 연결하기 위한 연결 장치
		- 허브, 리피터
	2) 데이터 링크 계층
		- 오류와 흐름을 제거하여 신뢰성 있는 데이터를 전송
		- 브르지, 스위치
	3) 네트워크 계층
		- 다수의 중개 시스템 중 올바른 경로를 선택하도록 지원
		- 라우터
	4) 전송 계층
		- 송신, 수신 프로세스 간의 연결
		- TCP/IP UDP
	5) 세션 계층
		- 송신, 수신 간의 논리적 연결
		- 호스트(PC 등)
	6) 표현 계층
		- 코드 문자 등을 번역하여 일관되게 전송하고
			압축, 해제, 보안 기능도 담당
		- 호스트(PC 등)
	7) 응용 계층
		- 사용자 친화 환경 제공(이메일, 웹 등)
		- 호스트(PC 등)
		
12.   네트워크 주요 장비 내용 확인(허브, 리피터, 브리지, 스위치)
	1) 허브
		- 허브는 여러 대의 컴퓨터를 연결하여 네트워크로 보내거나 하나의 네트워크로 수신된
			정보를 여러 대의 컴퓨터로 송신하기 위한 장비이다.
	2) 리피터
		- 디지털 신호를 증폭시켜 주는 역할을 하여 신호가 약해지지 않고
			컴퓨터로 수신되도록 한다.
	3) 브리지, 스위치
		- 브리지와 스위치는 두 시스템을 연결하는 네트워킹 장치이며 두 개의 LAN을
			연결하여 훨씬 더 큰 LAN을 만들어 준다.
		- 스위치는 하드웨어 기반으로 처리하기 때문에 속도가 빠르며, 브리지는 소프트웨어
			방식으로 처리하기 때문에 속도가 느리다.
		- 브리지는 포트들이 같은 속도를 지원하는 반면, 스위치는 각기 다른 속도를 지원하도록
			제어할 수 있다.
		- 스위치는 제공하는 포트 수가 수십 수백 개로 2~3개의 포트를 제공하는 브리지보다 많다.
		- 브리지는 Store and Forwarding 전송 방식만을 사용하나, 스위치는 Cut Through와
			Fragment Free 방식을 같이 사용한다.
			1) Store and Forwarding : 데이터를 전부 받은 후 다음 처리를 하는 방식
			2) Cut Through : 데이터의 목적지 주소만 확인 후 바로 전송 처리하는 방식
			3) Fragment Free : 위 두 방식의 장점을 결합한 방식
	4) 라우터
		- 망 연동 장비이다.
		- PC 등의 로컬 호스트가 LAN에 접근할 수 있도록 하며, WAN인테페이스를 사용하여
			WAN에 접근하도록 한다.
		- 라우팅 프로토콜은 경로 설정을 하여 원하는 목적지까지 지정된 데이터가 안전하게
			전달되도록 한다.
   
13. 네트워크 프로토콜 특징 설명 확인(단편화, 재조립, 캡슐화, 연결 제어.)
	1) 단편화 : 전송이 가능한 작은 블록으로 나누어지는 것
	2) 재조립 : 단편화되어 온 조각들을 원래 데이터로 복원하는 것
	3) 캡슐화 : 상위 계측의 데이터에 각종 정보를 추가하여 하위 계층으로 보내는 것
	4) 연결 제어 : 데이터의 전송량이나 속도를 제어하는 것
	5) 오류 제어 : 전송 중 잃어버리는 데이터나 오류가 발생한 데이터를 검증하는 것
	6) 동기화 : 송신과 수신 측의 시점을 맞추는 것
	7) 다중화 : 하나의 통신 회선에 여러 기기들이 접속할 수 있는 기술
	8) 주소 지정 : 송신과 수신지의 주소를 부여하여 정확한 데이터 전송을 보장하는 것
14. TCP/UDP 프로토콜 설명
	- TCP와 IP 프로토콜만을 지칭하는 것이 아니라 UDP(User Datagram Protocol),
		ICMP(Internt Control Message Protocol),
		ARP(Address Resolution Protocol),
		RARP(Reverse ARP) 등 관련된 프로토콜을 통칭한다.
	- TCP와 UDP로 구분되는 프로토콜은 트랜스포트계층에서 응용 계층과 인터넷 계층
		사이의 통신을 담당한다.
	- TCP와 UDP의 가장 큰 차이점은 데이터 전송의 신뢰성에 있다.
		TCP는 수신 측의 수신가능 상태, 수신 여부 등을 단계별로 체크해 가며 데이터를
		전송하는 반면, UDP는 망으로 데이터를 송신할 뿐 확인 작업을 수행하지 않는다.
	1) TCP(Transmission Control Protocol)
		- CRC 체크와 재전송 기능을 통해 신뢰성 있는 전송을 확보한다.
		- Flow Control 기능을 수행하여 단계별 데이터 전송 상황을 체크한다.
		- 논리적인 1:1 가상 회선을 지원하여 해당 경로로만 데이터가 전달되도록 한다.
		- 대표 서비스 : FIP, Telnet, Http, SMTP, POP, IMAP 등
	2) UDP(User Datagram Protocol)
		- 연결되어 있어도 데이터를 송신할 수 있다. 단, 수신 측의 수신 여부는 확인하기 어렵다.
		- Flow Control, Error Control을 하지 않아 신뢰성 있는 데이터 전송에는 부적합하다.
		- 하나의 송신 정보를 다수의 인원이 수신해야 할 경우 UDP를 사용한다.
		- 대표 서비스 : SNMP, DNS, TFTP, NFS, NETBIOS, 인터넷 게임/방송/증권 
15. 라이팅 프로토콜 설명(RIP, IGRP, OSPF, BGP)
	1) RIP
		- 최초의 라우팅 프로토콜
		- 거리 벡터 알고리즘 활용
		- 30초 주기로 전체 라우팅 정보 갱신
		- 변화 업데이트 시 많은 시간 소요
		- 라우팅 루프 발생 가능
	2) IGRP
		- RIP의 문제점 개선을 위해 시스코에서 개발
		- 네트워크 상태를 고려하여 라우팅(대역폭, 속도 등)
	3) OSPF
		- 링크 상태 알고리즘 사용
		- 발생한 변경 정보에 대해 RIP보다 빠른 업데이트
		- 토폴로지에 대한 정보가 전체 라우터에 동일하게 유지
	4) BGP
		- 규모가 큰 네트워크의 상호 연결
		- 대형 사업자(ISO) 간의 상호 라우팅
   
16. 운영체제별 특징 : 리눅스가 설명인것 식별.
	오픈소스 기반의 리눅스와 유닉스는 개발사 및 제공 업체가 다양하며 리눅스는
	Redhat, 페도라, 센트OS와 같은 Redhat 계열과 데비안, 우분투, 칼리, 라즈비안과 같은
	데비안 계열 그리고 기타 리눅스(젠투, 아치, 슬랙웨어)등으로 구분된다.
	1) 리눅스의 종류 및 특징
		- Debian GNU/Linux
			. 개발자 패키지와 매뉴얼이 활성화되어 있어 개발자에게 최적화 되어 있음
		- Ubuntu
			. 가장 광범위하게 쓰이는 리눅스 운영체제
			. 다양한 개발자용 패키지 제공
			. 소프트웨어 센터를 통해 응용소프트웨어 공급
		- openSUSE
			. 안정화된 버전(openSUSE)과 테스트 중인 버전(Tumbleweed)을 동시에 공급
			. YaST 패키지를 통해 태스크 자동화 지원
		- Fedora
			. 스마트 설정과 업데이트로 사용자 편의성 제공
			. 안정화된 운영과 다양한 하드웨어 지원
		- CentOS
			. 프로그래밍에 최적화된 환경 제공
			. RHEL 소스로 컴파일되어 해당 계열의 프로그램 대다수 사용 가능
		- Slackware
			. 다양한 소프트웨어와 그래픽 유저 인터페이스가 미리설치
			. 시스템 관리자를 위한 복구 툴 내장
		
17. 운영체제 운용 중 서버 운영 기준
	1. 서버 운용 기준
		- 운용 아키텍처 및 기능 파악
		- 네트워크 구성 현황 및 장비 메뉴얼 확보
		- 장비 가동 및 중지 매뉴얼 확인
		- 백업 주기, 보안 업데이트 주기 설정 및 점검
		- 트러블 발생 시 대처 방안 마련
	2. 개별 PC용 운영체제 운용 기준
		- 정기적인 데이터 백업
		- 주기적 보안 업데이트
		- 시스템 백업 정례화
		- 트러블 발생시 문의처 정보 확인
		
18. 개발 도구 설치/운용시 고려사항
	- 언어의 타입 : 정적 개발언어, 동적 개발언어
	- 목표 시스템의 특징 : 일반 시스템 또는 도메인 특화 시스템
	- 언어 특징 : 객체 지향, 명령형, 서술형, 순서형, 선언형
	- 지원 : 관리도구 지원형, 언어 독립형

19. 전자 정보 표준 프레임워크 장점
	- 공통컴포넌트의 재사용으로 중복 예산 절감
	- 표준화된 개발 기반으로 사업자 종속성 해소
	- 무상 제공으로 비용 경쟁력 향상
	- 표준화된 연계 모듈 활용으로 상호 운영성 향상
	- 개발 표준에 의한 모듈화로 유지 보수 용이
	
20. 버젼 관리 시스템 구축 시스템 설명 식별( cvs, subversion, opencm, git)
	1) CVS
		- 버전관리의 대상으로서 각각의 파일을 관리하지만, 프로젝트
			전체는 관리할 수 없는 등 초창기 버전관리 도구로서의
			여러 제약 사항 내포
		- 라이선스 : Non-GNU
	2) Subversion
		- 제한이 있던 CVS를 대체하기 위해 구현
		- 라이선스 : Subversion License
	3) OpenCM
		- 제한이 있던 CVS를 대체하기 위한 안전하고 완전성 높은
			형상관리도구를 표방
		- 라이선스 : GPL
		
# SQL활용
1. DDL명령문 식별
	DDL(data definition language)란, 데이터를 정의하는 언어로서,
	엄밀하게 말하면 '데이터를 담는 그릇을 정의하는 언어'이며, 이러한 그릇을 DBMS에서는
	오브젝트라고 한다.
	
	DDL대상			|	설명											|	비고
	-------------------------------------------------------------------------------------
	스키마(Schema)	|	- DBMS 특성과 구현 환경을 감안한 데이터 구조	|	DBMS마다 차이
					|	- 직관적으로 하나의 데이터베이스로 이해 가능	|
	-------------------------------------------------------------------------------------
	도메인(Domain)	|	- 속성의 데이터 타입과 크기, 제약 조건 등을		|	예를 들어, 주소를
					|		지정한 정보									|	VARCHAR(120)로
					|	- 속성이 가질 수 있는 앖의 범위로 이해 가능		|	정의
	-------------------------------------------------------------------------------------
	테이블(Table)	|	- 데이터 저장 공간								| 본 학습 대상
	-------------------------------------------------------------------------------------
	뷰(View)		|	- 하나 이상의 물리 테이블에서 유도되는 가상의	|
					|		논리 테이블									|
	-------------------------------------------------------------------------------------
	인덱스(index)	|	- 검색을 빠르게 하기 위한 데이터 구조			|
	
	1) DDL 조작방법
		오브젝트를 생성, 변경 그리고 제거하기 위해 다음과 같은 명령어를 사용한다.
	구분	|	DDL 명령어	|	내용
	-----------------------------------------------------------
	생성	|	CREATE		|	데이터베이스 오브젝트 생성
	변경 	|	ALTER		|	데이터베이스 오브젝트 변경
	삭제	| 	DROP		|	데이터베이스 오브젝트 삭제
	삭제	|	TRUNCATE	|	데이터베이스 오브젝트 내용 삭제
	------------------------------------------------------------
										
2. alter 명령어 잘못 된 것(만드는게 있을까요 ?)
	구분				|	문법
	-----------------------------------------------------------------------------------
	열추가				|	ALTER TABLE 테이블이름 ADD 열이름 데이터타입[DEFAULT 값]
	열 데이터 타입 변경	|	ALTER TABLE 테이블이름 MODIFY 열이름 데이터타입[DEFAULT 값]
	열 삭제				| 	ALTER TABLE 테이블이름 DROP 열이름
	-----------------------------------------------------------------------------------
	
3. 제약조건 내용
	제약 조건		|	설명
	-----------------------------------------------------------------------------------
	PRIMARY KEY		|	테이블의 기본키를 정의함
					|	기본으로 NOT NULL, UNIQUE 제약이 포함됨.
	-----------------------------------------------------------------------------------
	FOREIGN KEY		|	외래키를 정의
					|	참조 대상을 테이블이름(열이름)으로 명시해야 함
					|	참조 무결성 위배 상황 발생 시 처리 방법으로 옵션 지정 가능
					|	- NO ACTION, SET DEFAULT, SET NULL, CASCADE
	-----------------------------------------------------------------------------------
	UNIQUE			|	테이블 내에서 열은 유일한 값을 가져야 함.
					|	테이블 내에서 동일한 값을 가져서는 안 되는 항목에 지정함
	-----------------------------------------------------------------------------------
	NOT NULL		|	테이블 내에서 관련 열의 값은 NULL일 수 없음.
					|	필수 입력 항목에 대해 제약 조건으로 설정함.
	-----------------------------------------------------------------------------------
	CHECK 			|	개발자가 정의하는 제약 조건
					|	상황에 따라 다양한 조건 설정 가능
	-----------------------------------------------------------------------------------
	
4. 복사테이블 만들기 sql
	- CREATE TABLE 신규테이블 AS SELECT * FROM 기존테이블;
	- 위 SQL문의 SELECT 부분을 통해 기존테이블의 속성을 조회하여 신규테이블의 속성으로
		정의하여 생성하는 방식이다.
	- 생성된 테이블은 기존 테이블의 컬럼 및 데이터 유형과 길이 등을 그대로 적용함.
	- NOT NULL의 정의는 그대로 적용함.
	- 제약 조건은 적용되지 않음.
	- ALTER TABLE을 사용하여 제약조건을 추가해야 함.
	- 동일한 컬럼들로 생성된 경우 '*'를 사용함.
	- 필요한 컬럼만을 지정하여 테이블을 생성할 수 있음.
	
5. index가 무슨기능을 하는 것인지?
	- 인덱스는 데이터를 빠르게 찾을 수 있는 수단으로서, 테이블에 대한 조회 속도를 높여
		주는 자료구조를 일컫는다.
	- 인덱스는 테이블의 특정 레코드 위치를 알려주는 용도로 사용하는데,
		이러한 인덱스는 자동으로 생성되지 않는다.
	- PK 컬럼은 PK를 생성할 때 자동으로 인덱스가 생성된다.
		즉, PK 컬럼은 PK를 생성할 때 자동으로 PK 인덱스가 생성된다.
	- 인덱스가 생성되어 있다면 테이블의 일부분을 검색하여 데이터를 빠르게
		찾을 수 있다.
	-
6. 관계형 sql에서 다른 테이블과 결합하는 것을 무엇이라 하는지 ?
	조인
7. view 단점, view변경 가능한 경우
	1) 단점
		뷰 단점					|	내용
		------------------------------------------------------------------
		뷰 자체 인덱스 불가		| . 인덱스는 물리적으로 저장된 데이터를 대상으로 하기에
								| 논리적 구성인 뷰 자체는 인덱스를 가지지 못함.
		뷰 정의 변경 불가		| . 뷰의 정의를 변경하려면 뷰를 삭제하고 재생성하여야 함
		데이터 변경 제약 존재	| . 뷰의 내용에 대한 삽입, 삭제, 변경 제약이 있음.
		------------------------------------------------------------------
	2) view	변경 가능한 경우
		- 뷰를 통해 접근 가능한 데이터에 대한 변경이 가능하다.
		- 뷰가 하나의 테이블에서 정의된 경우
		- 뷰 생성에 사용된 테이블의 PK를 포함하는 경우
		
8. 조회문에서 조회문을 2중으로 사용하는 것의 개념?(in구문 안에 사용한 것)
	- 서브쿼리
		. 서브쿼리는 SQL문 안에 포함된 또 다른 SQL문을 의미한다.
		. 서브쿼리의 용도는 알려지지 않은 기준을 위한 검색을 위해 사용한다.
		
# SQL응용
1. 절차형 SQL의 특징
	- DBMS 엔진에서 직접 실행한다.
	- BEGIN/END의 Block화된 구조로 되어 있어 각 기능별로 모듈화가 가능하다.
	- 조건문, 반복문 등 단일 SQL 문장으로는 실행하기 어려운 연속적인 작업을 처리하는
		데에 적합하다.
	- 일련의 작업에 필요한 데이터를 DBMS 내부에서 직접 처리하기 때문에 일반적으로
		input/output packet이 적다.
	- 타 절차형 언어에 비해 작업의 효율성은 낮은 편이다.
	- DBMS 벤더별 차이가 있어서 벤더가 다른 환경에 이식하는 경우 수정 및 재컴파일이 필요하다.
	
2. 절차형 SQL을 구성하는 명령어
	1) DECLARE
		대상이 되는 프로시저, 사용자 정의함수 등을 정의
	2) BEGIN
		프로시저, 사용자 정의함수가 실행되는 시작점
	3) END
		프로시자, 사용자 정의함수가 실행되는 종료점
		
3. 프로시저 문법 설명 틀린 것(mode부분 확인)
	CREATE [OR REPLACE] PROCEDDURE [PROCEDURE_NAME]
	PARAMETER_1 [MODE] DATA_TYPE1,
	PARAMETER_2 [MODE] DATA_TYPE2,
	
	- CREATE 명령어로 DBMS 내에 프로시저 생성이 가능하다.
	- [OR REPLACE] 명령은 기존 프로시저 존재 시에 현재 컴파일하는 내용으로 덮어쓴다는
		Overwrite 의미이다. 기존 동명의 프로시저가 존재하고 CREATE 명령문만 사용하면
		컴파일 시에는 에러가 발생한다.
	- PARAMETER는 외부에서 프로시저 호출 시 변수를 입력 또는 출력할 수 있다.
	- MODE는 변수의 입력/출력을 구분하며 다음과 같이 사용한다.
		(가) IN : 운영 체제에서 프로시저로 전달되는 MODE
		(나) OUT : 프로시저에서 처리된 결과가 운영 체제로 전달되는 MODE
		(다) INOUT : IN과 OUT의 두 가지 기능을 동시에 수행하는 MODE
		
4. 프로시저 호출문법은 선언한 데이터 타입과 동일하게 입출력 변수를 사용하여야 한다.
	- 호출문법
		EXECUTE [PROCEDURE_NAME] (PARAMETER_1, PARAMETER_2, PARAMETER3,..)
	- SQL TOOL을 활용하여 직접 실행시키는 경우에는 EXECUTE, 줄여서 EXEC 명령어를 실행하여
		프로시저를 실행한다.
	- 프로시저에 입출력 변수가 존재하는 경우 데이터 유형 및 MODE에 변수를 입력하여
		실행한다.
	- 데이터 유형의 경우 자동 변환이 되어 별도 오류가 발생하지 않는 경우가 많지만
		가급적 프로시저에서 선언한 데이터 타입과 동일하게 입출력 변수를 넣어 실행시킨다.
	- SQL TOOL 등을 사용하지 않고 응용 프로그램이나 타 프로시저 등에서 호출 시에는
		프로그램에 따라 별도 명령어 없이 "@프로시저명" 또는 프로시저 명칭만 적어서 호출
		가능하다.
	
5. 사용자 정의 함수 개념
	- 사용자 정의함수는 프로시저와 동일하게 절차형 SQL을 활용하여 일련의 연산 처리 결과
		를 단일값으로 반환할 수 있는 절차형 SQL이다.
	- DBMS에서 제공되는 공통적 함수 이외에 사용자가 직접 정의하고 작성한다.
	- 사용자 정의함수의 호출을 통해 실행되며, 반환되는 단일값을 조회 또는 삽입, 수정 작업에
		이용하는 것이 일반적이다.
	- 기본적인 개념 및 사용법, 문법 등은 상기 언급된 프로시저와 동일하며, 종료 시 단일값을
		반환한다는 것이 프로시저와 가장 큰 차이점이다.
		
6. 사용자 정의 함수는 순차적으로 처리한다.

7. 트리거 관련 설명(반환형, 외부변수 in, out 있는지 여부 확인)
	1) 트리거란?
		- 특정 테이블에 삽입, 수정, 삭제 등의 데이터 변경 이벤트가 발생하면 DBMS에서 자동적
			으로 실행되도록 구현된 프로그램을 트리거라고 한다.
	2) 특징
		- 반환이 없다
		- DML을 주된 목적으로 한다는 점에서는 프로시저와 유사하나, EVENT 명령어를 통해
			트리거 실행을 위한 이벤트를 인지한다는 점과 외부 변수 IN, OUT이 없다는
			점이 프로시저나 사용자 정의함수와 다르다.

8. 트리거 작성시 주의사항(예외 처리 설계 필수 여부 확인.)
	1) 데이터 제어어(DCL, Data Control Language) 사용 불가
		- 트리거 내에는 COMMIT, ROLLBACK 등의 DCL을 사용할 수 없다.(쉽게말해 auto Commit한다)
		- 트리거 내에서 타 프로시저를 호출하는 것도 가능한데, 해당 프로시저 내에 COMMIT이
			포함되어 있다면 이로 인해 오류가 유발된다.
	2) 오류에 특히 주의할 것
		- 트리거 실행 중 오류가 발생하게 되면 트리거 실행의 원인을 제공한 데이터 작업에도
			영향을 주는 경우가 많다. 즉, 특정 테이블에 데이터를 추가한 후 발생하는 트리거에
			서 오류가 발생할 경우에는 트리거 이후의 작업이 진행되지 않는 것 뿐만 아니라,
			더나아가 데이터가 추가되지 않는다.
			결국 트랜잭션을 합치는 과정에서 더 높은 무결성 및 품질을 요구한다고 볼 수 
			있으므로 이런 부분에서 주의를 요한다.
		
9. 데이터 분석 함수의 개념(그룹함수)
	- 집계 함수와 유사한 개념이고 또한 집계 함수를 포함하기도 하나, 여기서는 소그룹 간의
		소계 및 중계 등의 중간 합계 분석 데이터를 산출하는 부분을 말한다.
	- 소계 및 총계 등을 구하기 위해서 집계 함수만 사용한다면 레벨별 집계를 위한 각 단계별
		데이터 질의어(DQL : Data Query Language)를 UNION ALL 등으로 결합하고 표시하는 단계를
		거쳐야 한다.

10. 데이터 분석 함수 : having역할 확인
	- 그룹화된 집합에 대한 조건 지정 시 사용한다.
	- where 조건으로 지정된 데이터 집합으로부터 그룹화된 집합에 대한 조건 선택 시에
		HAVING을 사용하는 것이다.
	- HAVING 구문은 선택적이며, 상수나 집약 함수, 집약키를 사용할 수 있다.
	- where 구문 내에는 사용할 수 없는 집계 함수의 구문을 적용하여 복수행의 계산 결과를
		조건별로 적용하는 데 사용된다.
	- 일반적으로 GROUP BY 뒤에 기재하며, GROUP BY 구문의 기준 항목이나 소그룹 집계 함수를
		활용한 조건을 적용하는 데 사용한다.
		쉽게 생각하면 GROUP BY 및 집계 함수에 대한 WHERE 구문이다.
11. 집계 함수의 종류
	1) COUNT : 복수 행의 줄 수
	2) SUM : 복수 행의 해당 컬럼간의 합계
	3) AVG : 복수 행의 해당 컬럼간의 평균
	4) MAX : 복수 행의 해당 컬럼간의 최댓값
	5) MIN : 복수 행의 해당 컬럼간의 최솟값
	6) STDDEV : 복수 행의 해당 컬럼간의 표준편차
	7) VARIAN : 복수 행의 해당 컬럼간의 분산
	
12. group by 구문.
	- 구문 뒤에는 테이블을 구분하는 컬럼을 기재하여 그룹화한다. 여기에 지정하는
		열을 집약키 또는 그룹화 열이라 칭한다.
	- SQL에서는 WHERE 구문을 활용하여 조건별 대상 ROW를 선택한다. 그러나 복수 ROW
		대상의 데이터 분석 시 그룹핑 대상이 되는 부분을 선별할 필요가 있다.
		GROUP BY는 그와 같은 경우에 사용하며, 아래와 같은 특성을 가진다
		1) NULL값을 가지는 ROW는 제외한 후 산출한다.
		2) SELECT에서 사용하는 것과 같은 ALIAS 사용이 불가하다.
		3) WHERE 구문 안에 포함되지 않는다.
		4) WHERE 구문은 GROUP BY보다 먼저 실행되고, 대상이 되는 단일 행을 사전에 선별하는
			역할을 한다.
	- GROUP BY 구문은 실제 구체적 데이터 분석값을 보자고 하는 컬럼 단위를 선정할 때 사용되는
		기준이 되며, 이 부분은 조정을 통해 사용자가 원하는 분석 데이터를 볼 수 있게 해 준다.
		
13. 윈도우 함수 - rank, dense rank, row_number, first_value, lag
	윈도우 함수란?
		윈도우 함수는 데이터베이스를 사용한 온라인 분석 처리 용도로 사용하기 위해서
		표준 SQL에 추가된 기능이다.
	1) 순위 함수
		(가) RANK
			- 레코드의 순위를 계산한다.
			- 동일 순위의 레코드 존재 시 후순위는 넘어간다
				예) 2위가 3개인 레코드인 경우 : 2위, 2위 2위 5위, 6위, ..
		(나) DENSE_RANK
			- 레코드의 순위를 계산한다.
			- 동일 순위의 레코드 존재 시에도 후순의로 넘어가지 않는다.
				예) 2위가 3개인 레코드인 경우 : 2위, 2위, 2위, 3위, 4위, ..
		(다) ROW_NUMBER
			- 레코드의 순위를 계산한다.
			- 동일 순위의 값이 존재해도 이와 무관하게 연속 번호를 부여한다.
				예) 2위가 3개인 레코드인 경우 : 2위, 3위 4위, 5위, 6위, ..
	2) 행순서 함수(SQL Server에서는 지원하지 않음)
		(가) FIRST_VALUE
			- 파티션별 윈도우에서 가장 먼저 나오는 값을 찾는다.
			- 집계 함수의 MIN과 동일한 결과를 출력한다.
		(나) LAST_VALUE
			- 파티션별 윈도우에서 가장 늦게 나오는 값을 찾는다.
			- 집계 함수의 MAX와 동일한 결과를 출력한다.
		(다) LAG
			- 파티션별 윈도우에서 1부터 이전 몇 번째 행의 값을 가져온다.
		(라) LEAD
			- 파티션별 윈도우에서 1부터 이후 몇 번째 행의 값을 가져온다.
		
14. 응용시스템 DBMS 접속, jdbc
	자바 데이터베이스 연결(JDBC:Java DataBase Connectivity)
		- 언어마다 DBMS에 접근할 수 있게 하는 기술은 여러 가지가 있으나 기본적인개념은
			유사하다.
		- 자바는 자바 데이터베이스 연결을 사용한다.
		- JDBC는 SQL을 사용하여 DBMS에 질의하고 데이터를 조작하는 API(Application Programming
			Interface)를 제공한다.
		- JDBC API를 사용하는 방법은 앞에서 순수한 자바 언어로 JDBC를 사용하는 방법과
			동일하다
		
15. mybatis sql 문법 구조 - ${@@@} : @@@에 들어가는 내용 확인
	1) mybatis란 ?
		- SQL Mapping 기반 오픈 소스 Access Framwork이다.
		- MyBatis는 DBMS에 질의하기 위한 SQL 쿼리를 별도로 XML 파일로 분리하고 Mapping을
			통해 SQL을 실행한다.
	2) 문법 기본 구조
		- Mybatis 설정 파일은 데이터 소스 연결, SQL 매퍼 파일, 타입 별칭, 타입 핸들러와
			같은 속성 설정이 가능하다.
		- 다양한 속성을 조정하여 다중 접속, 연결 문자 등의 조정이 가능하다.
		- 응용시스템을 통해 SQL을 실행할 때 가장 중요한 부분 중 하나는 입력변수에 대한 처리
			방법이다. MyBatis에서는 #{Parameter Name}으로 처리한다.
		- #{Parameter Name}
16. 사용자 그룹관리 개념.
	- 업무상 회사 내 타부서 간 또는 외부 시스템 등과 데이터를 공유하기 위해 DB를 오픈하는
		경우가 발생한다. 이런 경우 전체 DB에 대해 오픈하는 경우는 거의 없고, 필요로 따라
		제한적인 DB만을 오픈한다. 여기서 해당 DB에 접속하여 사용하는 대상자를 사용자라고
		하며, 다수의 사용자가 접속하는 사용자를 사용자 그룹이라고 한다.
		사용자 그룹은 동일한 권한과 제약을 가지는 사용자들이 공통으로 사용하는 계정이다.
	- DBMS에서의 사용자 그룹의 관리는 역할기반 접근제어(RBAC : Role Based Access Control)
		그 그룹 관리를 기반으로 한다.
	- 사용자를 일일이 개별적으로 분할하지 않고 수행하는 역할을 기반으로 그룹핑하여 먼저
		분할하고 사용자 그룹에 권한을 부여한다. 그 다음 개별 사용자를 사용자 그룹에
		맞추어 배정하여 결국 사용자는 사용자 그룹에 속한 권한을 사용하게 한다.
		
17. 사용자 권한 부여/회수 : 재권한 부여관련 내용 확인.
	1) 사용자 권한 부여
		객체의 소유자는 객체에 대한 모든 권한을 가지며, 자신이 소유한 특정 권한을 GRANT문을
		사용하여 다른 사용자에게 부여할 수 있다.
	2) 사용자 권한 회수
		- 사용자에게 부여된 권한을 다시 회수할 수 있다.
		- 권한을 부여하는 것과 반대 개념이며, 사용하는 방법도 유사하다. REVOKE를 사용하여
			회수하며, TO가 아닌 FROM으로 사용자 그룹을 선택한다.
		- REVOKE [PRIVILEGE] ON [OBJECT] FROM [USER_GROUP]
18. DCL 명령문 작성 관련 내용(수행 주체와 대상주체에 대한 내용)
   - 수행 주체의 역할, 수행 기능을 위주로 정리한다.
   - 유사성이 일정 수준 이상 도출되는 수향 주체 대상을 정리한다.
   
